// Mocks generated by Mockito 5.0.2 from annotations
// in redux_remote_devtools/test/remote_devtools_middleware_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:redux/src/store.dart' as _i5;
import 'package:redux_remote_devtools/redux_remote_devtools.dart' as _i7;
import 'package:socketcluster_client/src/emitter.dart' as _i3;
import 'package:socketcluster_client/src/socket.dart' as _i2;

import 'remote_devtools_middleware_test.dart' as _i4;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeSocket extends _i1.Fake implements _i2.Socket {}

class _FakeEmitter extends _i1.Fake implements _i3.Emitter {}

/// A class which mocks [Next].
///
/// See the documentation for Mockito's code generation for more information.
class MockNext extends _i1.Mock implements _i4.Next {
  MockNext() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [Store].
///
/// See the documentation for Mockito's code generation for more information.
class MockStore<State> extends _i1.Mock implements _i5.Store<State> {
  MockStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Reducer<State> get reducer => (super.noSuchMethod(
          Invocation.getter(#reducer),
          returnValue: (State state, dynamic action) => null)
      as _i5.Reducer<State>);
  @override
  set reducer(_i5.Reducer<State>? _reducer) =>
      super.noSuchMethod(Invocation.setter(#reducer, _reducer),
          returnValueForMissingStub: null);
  @override
  State get state =>
      (super.noSuchMethod(Invocation.getter(#state), returnValue: null)
          as State);
  @override
  _i6.Stream<State> get onChange =>
      (super.noSuchMethod(Invocation.getter(#onChange),
          returnValue: Stream<State>.empty()) as _i6.Stream<State>);
  @override
  _i6.Future<dynamic> teardown() =>
      (super.noSuchMethod(Invocation.method(#teardown, []),
          returnValue: Future.value(null)) as _i6.Future<dynamic>);
}

/// A class which mocks [SocketClusterWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocketClusterWrapper extends _i1.Mock
    implements _i7.SocketClusterWrapper {
  MockSocketClusterWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.SocketFactory get socketFactory =>
      (super.noSuchMethod(Invocation.getter(#socketFactory),
              returnValue: (String url) => Future.value(_FakeSocket()))
          as _i7.SocketFactory);
  @override
  set socketFactory(_i7.SocketFactory? _socketFactory) =>
      super.noSuchMethod(Invocation.setter(#socketFactory, _socketFactory),
          returnValueForMissingStub: null);
  @override
  String get url =>
      (super.noSuchMethod(Invocation.getter(#url), returnValue: '') as String);
  @override
  set url(String? _url) => super.noSuchMethod(Invocation.setter(#url, _url),
      returnValueForMissingStub: null);
  @override
  _i6.Future<void> connect() =>
      (super.noSuchMethod(Invocation.method(#connect, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i6.Future<void>);
  @override
  _i3.Emitter on(String? event, Function? func) =>
      (super.noSuchMethod(Invocation.method(#on, [event, func]),
          returnValue: _FakeEmitter()) as _i3.Emitter);
  @override
  void emit(String? event, Object? data, [_i3.AckCall? ack]) =>
      super.noSuchMethod(Invocation.method(#emit, [event, data, ack]),
          returnValueForMissingStub: null);
}
