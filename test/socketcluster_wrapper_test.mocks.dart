// Mocks generated by Mockito 5.0.2 from annotations
// in redux_remote_devtools/test/socketcluster_wrapper_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:socketcluster_client/src/channel.dart' as _i2;
import 'package:socketcluster_client/src/emitter.dart' as _i4;
import 'package:socketcluster_client/src/socket.dart' as _i3;

import 'socketcluster_wrapper_test.dart' as _i5;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeChannel extends _i1.Fake implements _i2.Channel {}

class _FakeSocket extends _i1.Fake implements _i3.Socket {}

class _FakeEmitter extends _i1.Fake implements _i4.Emitter {}

/// A class which mocks [Socket].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocket extends _i1.Mock implements _i3.Socket {
  MockSocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Channel> get channels =>
      (super.noSuchMethod(Invocation.getter(#channels),
          returnValue: <_i2.Channel>[]) as List<_i2.Channel>);
  @override
  int get state =>
      (super.noSuchMethod(Invocation.getter(#state), returnValue: 0) as int);
  @override
  void setProxy(String? host, int? port) =>
      super.noSuchMethod(Invocation.method(#setProxy, [host, port]),
          returnValueForMissingStub: null);
  @override
  void setSSLCertVerification(bool? value) =>
      super.noSuchMethod(Invocation.method(#setSSLCertVerification, [value]),
          returnValueForMissingStub: null);
  @override
  _i2.Channel createChannel(String? name) =>
      (super.noSuchMethod(Invocation.method(#createChannel, [name]),
          returnValue: _FakeChannel()) as _i2.Channel);
  @override
  _i4.AckCall ack(int? cid) =>
      (super.noSuchMethod(Invocation.method(#ack, [cid]),
              returnValue: (String name, dynamic error, dynamic data) => null)
          as _i4.AckCall);
  @override
  _i3.Socket emit(String? event, Object? data, [_i4.AckCall? ack]) =>
      (super.noSuchMethod(Invocation.method(#emit, [event, data, ack]),
          returnValue: _FakeSocket()) as _i3.Socket);
  @override
  _i3.Socket subscribe(String? channel, [_i4.AckCall? ack]) =>
      (super.noSuchMethod(Invocation.method(#subscribe, [channel, ack]),
          returnValue: _FakeSocket()) as _i3.Socket);
  @override
  _i3.Socket unsubscribe(String? channel, [_i4.AckCall? ack]) =>
      (super.noSuchMethod(Invocation.method(#unsubscribe, [channel, ack]),
          returnValue: _FakeSocket()) as _i3.Socket);
  @override
  _i3.Socket publish(String? channel, Object? data, [_i4.AckCall? ack]) =>
      (super.noSuchMethod(Invocation.method(#publish, [channel, data, ack]),
          returnValue: _FakeSocket()) as _i3.Socket);
  @override
  List<dynamic> getAckObject(String? event, _i4.AckCall? ack) =>
      (super.noSuchMethod(Invocation.method(#getAckObject, [event, ack]),
          returnValue: <dynamic>[]) as List<dynamic>);
  @override
  _i4.Emitter on(String? event, Function? func) =>
      (super.noSuchMethod(Invocation.method(#on, [event, func]),
          returnValue: _FakeEmitter()) as _i4.Emitter);
  @override
  _i4.Emitter onSubscribe(String? event, _i4.Listener? fn) =>
      (super.noSuchMethod(Invocation.method(#onSubscribe, [event, fn]),
          returnValue: _FakeEmitter()) as _i4.Emitter);
  @override
  _i4.Emitter handleEmit(String? event, dynamic object) =>
      (super.noSuchMethod(Invocation.method(#handleEmit, [event, object]),
          returnValue: _FakeEmitter()) as _i4.Emitter);
  @override
  _i4.Emitter handleEmitAck(String? event, dynamic object, _i4.AckCall? ack) =>
      (super.noSuchMethod(
          Invocation.method(#handleEmitAck, [event, object, ack]),
          returnValue: _FakeEmitter()) as _i4.Emitter);
  @override
  _i4.Emitter handlePublish(String? event, dynamic object) =>
      (super.noSuchMethod(Invocation.method(#handlePublish, [event, object]),
          returnValue: _FakeEmitter()) as _i4.Emitter);
  @override
  bool hasEventAck(String? event) =>
      (super.noSuchMethod(Invocation.method(#hasEventAck, [event]),
          returnValue: false) as bool);
}

/// A class which mocks [SocketFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocketFactory extends _i1.Mock implements _i5.SocketFactory {
  MockSocketFactory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Socket> connect(String? url) =>
      (super.noSuchMethod(Invocation.method(#connect, [url]),
          returnValue: Future.value(_FakeSocket())) as _i6.Future<_i3.Socket>);
}
